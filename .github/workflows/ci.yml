name: Comprehensive CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Multi-Rust Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.70, 1.75, 1.80]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-

      - name: Build
        run: cargo build

      - name: Run tests
        run: cargo test

      - name: Run comprehensive test suite
        run: |
          echo "Running comprehensive test suite..."
          cargo run examples/comprehensive_test.pg
          echo "Comprehensive tests completed"

      - name: Run all feature tests
        run: |
          echo "Running all feature tests..."
          cargo run examples/array_test.pg
          cargo run examples/test_new_features.pg
          cargo run examples/method_comparison.pg
          cargo run examples/simple_date_test.pg
          cargo run examples/replaceChar_test.pg
          cargo run examples/new_methods_test.pg
          cargo run examples/final_integration_test.pg
          echo "All feature tests completed"

      - name: Test error handling
        run: |
          echo "Testing error conditions..."
          cargo run examples/array_bounds_test.pg || true
          cargo run examples/array_method_error_test.pg || true
          cargo run examples/import_error_test.pg || true
          echo "Error handling tests completed"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  build-basic:
    name: Basic Multi-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --release

      - name: Test basic functionality
        run: cargo run --release examples/hello.pg

  performance:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build release version
        run: cargo build --release

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          time cargo run --release examples/performance_test.pg
          echo "Performance benchmarks completed"

      - name: Memory usage analysis
        run: |
          echo "Analyzing memory usage..."
          /usr/bin/time -v cargo run --release examples/performance_test.pg 2>&1 | grep "Maximum resident set size" || true

      - name: Test distribution script
        run: |
          chmod +x scripts/create-distribution.sh
          ./scripts/create-distribution.sh test-platform ubuntu-latest
          ls -la pidgin-compiler-test-platform/ 